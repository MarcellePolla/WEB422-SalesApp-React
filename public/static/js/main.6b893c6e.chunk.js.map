{"version":3,"sources":["Sales.js","Sale.js","NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Sales","props","state","sales","currentPage","previousPage","bind","nextPage","page","Promise","resolve","reject","fetch","then","response","json","data","this","getData","setState","prevState","length","Table","hover","map","sale","key","_id","onClick","history","push","customer","email","storeLocation","items","Date","saleDate","toLocaleDateString","Pagination","Prev","Item","Next","React","Component","withRouter","Sale","loading","id","status","Error","statusText","viewedSale","catch","error","console","log","prevProps","total","forEach","element","price","quantity","toFixed","ListGroup","ListGroupItem","age","satisfaction","itemTotal","item","index","name","NotFound","App","recentlyViewed","searchId","updateSearchId","indexOf","e","target","value","Navbar","inverse","collapseOnSelect","staticTop","Header","to","Brand","Toggle","Collapse","Nav","NavItem","NavDropdown","title","MenuItem","Form","pullRight","FormGroup","FormControl","type","onChange","placeholder","className","Grid","Row","Col","md","exact","path","render","match","params","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6b893c6e.chunk.js","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom'\nimport  { Table, Pagination } from 'react-bootstrap'\nclass Sales extends React.Component {\n  constructor(props) {\n    super(props);  \n    this.state = { sales:[], currentPage: 1}; \n    \n    this.previousPage= this.previousPage.bind(this);\n    this.nextPage= this.nextPage.bind(this);\n    \n\n}\ngetData(page){\n return new Promise(function(resolve, reject){\n  fetch(`https://lit-retreat-47963.herokuapp.com/api/sales?page=${page}&perPage=10`)\n  .then(response => response.json())\n  .then(data => {\n    resolve(data);\n  });\n });\n}\n\ncomponentDidMount(){\n  this.getData(this.state.currentPage).then(data => {\n    this.setState({sales: data});\n  });\n}\n\npreviousPage(){\n  if(this.state.currentPage > 1){\n    this.getData(this.state.currentPage - 1).then(data => {\n      this.setState((prevState) => {\n        return { sales: data, currentPage: prevState.currentPage - 1 }\n      });\n    });\n  }\n}\nnextPage(){\n  this.getData(this.state.currentPage + 1).then(data => {\n    this.setState((prevState) => {\n      return { sales: data, currentPage: prevState.currentPage + 1 }\n    });\n  });\n}\n\nrender() {\n  \n      if(this.state.sales.length > 0){\n        return (\n        <div>\n        <Table hover>\n        <thead>\n          <tr>\n          <th>Customer</th>\n          <th>Store Location</th>\n          <th>Number of Items</th>\n          <th>Sale Date</th>\n          </tr>\n        </thead>\n        <tbody>\n          \n        {this.state.sales.map(function(sale){\n          return (\n            <tr key={sale._id} onClick={()=>{this.props.history.push(`/Sale/${sale._id}`)}}>\n                <td>{sale.customer.email}</td>\n                <td>{sale.storeLocation}</td>\n                <td>{sale.items.length}</td>\n                <td>{new Date(sale.saleDate).toLocaleDateString()}</td>\n            </tr>\n        );\n        }, this)}\n        </tbody>\n </Table>\n <Pagination>\n       <Pagination.Prev onClick={this.previousPage} />\n      <Pagination.Item>{this.state.currentPage}</Pagination.Item>\n      <Pagination.Next onClick={this.nextPage} />\n </Pagination>\n </div>\n );\n}else{\n return null; // NOTE: This can be changed to render a <Loading /> Component for a better user experience\n}\n  \n  }\n\n\n}\n\nexport default withRouter(Sales);","import React from 'react';\nimport  { ListGroup, ListGroupItem, Table  } from 'react-bootstrap'\n\nclass Sale extends React.Component {\n  constructor(props) {\n    super(props);  \n    this.state = { sale:{}, loading: true}; \n}\n\ncomponentDidMount(){\n  fetch(`https://lit-retreat-47963.herokuapp.com/api/sales/${this.props.id}`) \n    .then(response => {\n      if (response.status >= 200 && response.status <= 299) {\n        return response.json();\n      } else {\n        throw Error(response.statusText);\n      }\n    })\n    .then(data => {\n        if(data._id){\n          this.props.viewedSale(data._id);\n          this.setState({sale: data, loading:false});\n        }\n    })\n    .catch(error => {\n      // Handle the error\n      console.log(error);\n      this.setState({sale: \"\", loading:false});\n    });\n}\ncomponentDidUpdate(prevProps){\n  if (prevProps.id !== this.props.id){\n    this.setState({loading: true});\n    fetch(`https://lit-retreat-47963.herokuapp.com/api/sales/${this.props.id}`)\n    .then(response => {\n      if (response.status >= 200 && response.status <= 299) {\n        return response.json();\n      } else {\n        throw Error(response.statusText);\n      }\n    })\n    .then(data => {\n        if(data._id){\n          this.props.viewedSale(data._id);\n          this.setState({sale: data, loading:false});\n        }\n    })\n    .catch(error => {\n      // Handle the error\n      console.log(error);\n      this.setState({sale: \"\", loading:false});\n    });\n  }\n}\n\nitemTotal(items){\n  let total = 0;\n  items.forEach(element => {\n    total += (element.price * element.quantity);\n  });\n  return total.toFixed(2);\n}\n\nrender() {\n  if (this.state.loading) {\n    return <h4>Loading</h4>; // NOTE: This can be changed to render a <Loading /> Component for a better user experience\n   } else {\n    if (this.state.sale._id) {\n    return (<div>\n    <h1>Sale: {this.state.sale._id}{/* <!-- TODO: Show the Sale ID --> */}</h1>\n    <h2>Customer</h2>\n    <ListGroup>\n    <ListGroupItem><strong>email:</strong> {this.state.sale.customer.email}{/* <!-- TODO: Show the Customer Email --> */}</ListGroupItem>\n    <ListGroupItem><strong>age:</strong> {this.state.sale.customer.age} {/* <!-- TODO: Show the Customer Age --> */}</ListGroupItem>\n    <ListGroupItem><strong>satisfaction:</strong> {this.state.sale.customer.satisfaction}{/* <!-- TODO: Show the Customer Satisfaction --> */} /\n   5</ListGroupItem>\n    </ListGroup>\n    <h2> Items: ${this.itemTotal(this.state.sale.items)}{/* <!-- TODO: Show the Item Total --> */}</h2>\n    <Table>\n <thead>\n <tr>\n <th>Product Name</th>\n <th>Quantity</th>\n <th>Price</th>\n </tr>\n </thead>\n <tbody>\n {/* <!-- TODO: loop through all of the sale items and display their data --> */}\n {this.state.sale.items.map(function(item, index){\n          return (\n            <tr key={index}>\n                <td>{item.name}</td>\n                <td>{item.quantity}</td>\n                <td>${item.price}</td>\n            </tr>\n        );\n        })}\n </tbody>\n </Table>\n </div>);\n } else {\n return <div><h1>Unable to find Sale</h1><p>id: {this.props.id}</p></div>\n }\n}\n  }//end of render\n}//end of Sale\n\nexport default Sale;","import React from 'react';\n\nclass NotFound extends React.Component {\n\nrender() {\n    return (\n        <div><h1>Not Found</h1><p>We can't find what you're looking for...</p></div>\n    );\n  }\n}\n\nexport default NotFound;","import React from 'react';\nimport './App.css';\nimport { Navbar, Nav, NavItem, NavDropdown, MenuItem, FormGroup, FormControl , Grid, Row, Col} from 'react-bootstrap'\nimport { Link, Switch, Redirect, Route } from 'react-router-dom'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport Sales from './Sales.js';\nimport Sale from './Sale.js';\nimport NotFound from './NotFound';\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);  \n    this.state = { recentlyViewed:[], searchId: \"\"}; \n\n    this.viewedSale = this.viewedSale.bind(this);\n    this.updateSearchId = this.updateSearchId.bind(this);\n}\n\nviewedSale(id){  \n  if(this.state.recentlyViewed.indexOf(id) === -1){\n    this.state.recentlyViewed.push(id);\n    this.setState({recentlyViewed: this.state.recentlyViewed});\n  }\n  \n  }\n\n // Updates the value of \"searchId\" in the state using the e.target.value value, causing the component to render  \nupdateSearchId(e){ // 'e' is the current event object\n  this.setState({\n    searchId: e.target.value\n  });\n}\n\nrender() {\n  return (\n    <div>\n    <Navbar inverse collapseOnSelect staticTop>\n     <Navbar.Header>\n     <LinkContainer to=\"/\">\n     <Navbar.Brand>\n     WEB422 - Sales\n     </Navbar.Brand>\n     </LinkContainer>\n     <Navbar.Toggle />\n     </Navbar.Header>\n     <Navbar.Collapse>\n     <Nav>\n     <LinkContainer to=\"/Sales\">\n     <NavItem>All Sales</NavItem>\n     </LinkContainer>\n     <NavDropdown title=\"Previously Viewed\" id=\"basic-nav-dropdown\">\n     {this.state.recentlyViewed.length > 0 ? \n     this.state.recentlyViewed.map((id, index)=>(\n      <LinkContainer to={`/Sale/${id}`} key={index}>\n      <MenuItem >Sale: {id}</MenuItem>\n      </LinkContainer> )) :\n      <MenuItem>...</MenuItem>}\n      </NavDropdown>\n      </Nav>\n      <Navbar.Form pullRight>\n      <FormGroup>\n      <FormControl type=\"text\" onChange={this.updateSearchId} placeholder=\"Sale ID\" />\n      </FormGroup>{' '}\n      <Link className=\"btn btn-default\" to={\"/Sale/\" + this.state.searchId}>Search</Link>\n      </Navbar.Form>\n      </Navbar.Collapse>\n     </Navbar>\n\n     <Grid>\n        <Row>\n            <Col md={12}>\n              <Switch>\n                <Route exact path='/' render={() => (\n                     <Redirect push to={\"/Sales\"} />     \n                  )}/>\n                <Route exact path='/Sales' render={() => (\n                    <Sales />\n                )}/>\n                <Route path='/Sale/:id' render={(props) => (\n                  <Sale id={props.match.params.id} viewedSale={this.viewedSale} />\n                  )}/>\n                <Route render={() => (\n                  <NotFound/>\n                )}/>\n              </Switch>\n            </Col>\n        </Row>\n      </Grid>\n     </div>\n  );\n}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/*********************************************************************************\n* WEB422 – Assignment 3\n* I declare that this assignment is my own work in accordance with Seneca Academic Policy.\n* No part of this assignment has been copied manually or electronically from any other source\n* (including web sites) or distributed to other students.\n*\n* Name: Marcelle Polla Student ID: 126654185 Date: June 26, 2020\n*\n*\n********************************************************************************/\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}